{"version":3,"sources":["Components/Monitor.tsx","Components/Button.tsx","Components/Input.tsx","Components/Setter.tsx","Reducers/StateReducer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Monitor","count","maxCount","error","disabledButtonSet","className","Button","disabled","callBack","children","onClick","Input","value","type","onChange","e","Number","currentTarget","Setter","startCount","setStartCount","errorStartCount","errorMaxCount","setMaxCount","console","log","ADD_COUNT","RESET_COUNT","CHANGE_SC_IF_NUMBER_LESS_ZERO","CHANGE_SC_IF_NUMBER_LESS_MC","CHANGE_SC_IF_OTHERS","CHANGE_MC_IF_NUMBER_MORE_SC","CHANGE_MC_IF_OTHERS","SET_VALUES","StateReducer","state","action","num","App","startCountLocalStorage","localStorage","getItem","initState","useReducer","dispatchState","buttonIncDisabled","buttonResetDisabled","ChangeSCIfNumberLessZeroAC","ChangeSCIfNumberLessMCAC","ChangeSCIfOthersAC","ChangeMCIfNumberMoreSCAC","ChangeMCIfOthersAC","setItem","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3175943.chunk.js","sourcesContent":["import React from 'react'\n\ntype PropsType = {\n  count: number\n  maxCount: number\n  error: boolean\n  disabledButtonSet: boolean\n}\n\nexport const Monitor = ({count, maxCount, error, disabledButtonSet}: PropsType) => {\n  const valueMonitor = (): JSX.Element => {\n    if (disabledButtonSet) {\n        if(error) {\n          return <span className={'error'}>Incorrect value</span>\n        } else if(count === maxCount) {\n          return <span className={'red'}>{count}</span>\n        } else {\n          return <span>{count}</span>\n        }\n      } else {\n        return <span className={'text'}>Enter values and press \"Set\"</span>\n      }\n  }\n\n  return (\n    <div className={'monitor'}>\n      {valueMonitor()}\n    </div>\n  )\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\n\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\ntype PropsType = DefaultButtonPropsType & {\n  callBack: () => void\n  disabled?: boolean\n}\n\nexport const Button = ({disabled, callBack, children}: PropsType) => {\n\n  const onClick = () => {\n    callBack()\n  }\n  return (\n    <button\n      disabled={disabled}\n      onClick={onClick}\n    >\n      {children}\n    </button>\n  )\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\n\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\ntype PropsType = DefaultInputPropsType & {\n  value: number\n  error: boolean\n  callBack: (number: number) => void\n}\n\nexport const Input = ({value, callBack, error}: PropsType) => {\n  const onChange = (e: ChangeEvent<HTMLInputElement>) => {\n    callBack(Number(e.currentTarget.value))\n  }\n\n  const className = `${error ? 'error-input' : ''}`\n\n  return (\n    <input\n      className={className}\n      type={'number'}\n      value={value}\n      onChange={onChange} />\n  )\n}","import React from 'react'\nimport {Input} from \"./Input\";\n\ntype PropsType = {\n  startCount: number\n  maxCount: number\n  setStartCount: (num: number) => void\n  setMaxCount: (num: number) => void\n  errorStartCount: boolean\n  errorMaxCount: boolean\n}\n\nexport const Setter = ({startCount, maxCount, setStartCount, errorStartCount, errorMaxCount, setMaxCount}: PropsType) => {\n console.log(maxCount)\n\n  return (\n    <div className={'setter'}>\n      <div>\n        <span>Max value:</span>\n        <Input\n          value={maxCount}\n          error={errorMaxCount}\n          callBack={setMaxCount}\n        />\n      </div>\n      <div>\n        <span>Start value:</span>\n        <Input\n          value={startCount}\n          error={errorStartCount}\n          callBack={setStartCount}\n        />\n      </div>\n    </div>\n\n  )\n}","import {StateType} from \"../App\";\nconst ADD_COUNT = 'ADD_COUNT'\nconst RESET_COUNT = 'RESET_COUNT'\nconst CHANGE_SC_IF_NUMBER_LESS_ZERO = 'CHANGE_SC_IF_NUMBER_LESS_ZERO'\nconst CHANGE_SC_IF_NUMBER_LESS_MC = 'CHANGE_SC_IF_NUMBER_LESS_MC'\nconst CHANGE_SC_IF_OTHERS = 'CHANGE_SC_IF_OTHERS'\nconst CHANGE_MC_IF_NUMBER_MORE_SC = 'CHANGE_MC_IF_NUMBER_MORE_SC'\nconst CHANGE_MC_IF_OTHERS = 'CHANGE_MC_IF_OTHERS'\nconst SET_VALUES = 'SET_VALUES'\n\nexport const StateReducer = (state: StateType, action: ActionsType) => {\n  switch (action.type) {\n    case ADD_COUNT: {\n      return {\n        ...state,\n        count: state.count + 1\n      }\n    }\n    case RESET_COUNT: {\n      return {\n        ...state,\n        count: state.startCount\n      }\n    }\n    case CHANGE_SC_IF_NUMBER_LESS_ZERO: {\n      return {\n        ...state,\n        startCount: action.num,\n        errorStartCount: true,\n        disabledButtonSet: true,\n        error: true\n      }\n    }\n    case CHANGE_SC_IF_NUMBER_LESS_MC: {\n      return {\n        ...state,\n        startCount: action.num,\n        errorStartCount: false,\n        errorMaxCount: false,\n        disabledButtonSet: false,\n        error: false\n      }\n    }\n    case CHANGE_SC_IF_OTHERS: {\n      return {\n        ...state,\n        startCount: action.num,\n        errorStartCount: true,\n        errorMaxCount: true,\n        disabledButtonSet: true,\n        error: true\n      }\n    }\n    case CHANGE_MC_IF_NUMBER_MORE_SC: {\n      return {\n        ...state,\n        maxCount: action.num,\n        errorStartCount: false,\n        errorMaxCount: false,\n        disabledButtonSet: false,\n        error: false\n      }\n    }\n    case CHANGE_MC_IF_OTHERS: {\n      return {\n        ...state,\n        maxCount: action.num,\n        errorStartCount: true,\n        errorMaxCount: true,\n        disabledButtonSet: true,\n        error: true\n      }\n    }\n    case SET_VALUES: {\n      return {\n          ...state,\n          count: state.startCount,\n          disabledButtonSet: true\n      }\n    }\n  }\n}\n\ntype ActionsType =\n  AddCountActionType\n  | ResetCountActionType\n  | ChangeSCIfNumberLessZeroActionType\n  | ChangeSCIfNumberLessMCActionType\n  | ChangeSCIfOthersActionType\n  | ChangeMCIfNumberMoreSCActionType\n  | ChangeMCIfOthersActionType\n  | SetValuesActionType\ntype AddCountActionType = ReturnType<typeof AddCountAC>\ntype ResetCountActionType = ReturnType<typeof ResetCountAC>\ntype ChangeSCIfNumberLessZeroActionType = ReturnType<typeof ChangeSCIfNumberLessZeroAC>\ntype ChangeSCIfNumberLessMCActionType = ReturnType<typeof ChangeSCIfNumberLessMCAC>\ntype ChangeSCIfOthersActionType = ReturnType<typeof ChangeSCIfOthersAC>\ntype ChangeMCIfNumberMoreSCActionType = ReturnType<typeof ChangeMCIfNumberMoreSCAC>\ntype ChangeMCIfOthersActionType = ReturnType<typeof ChangeMCIfOthersAC>\ntype SetValuesActionType = ReturnType<typeof SetValuesAC>\n\nexport const AddCountAC = () => {\n  return {\n    type: ADD_COUNT\n  } as const\n}\nexport const ResetCountAC = () => {\n  return {\n    type: RESET_COUNT\n  } as const\n}\nexport const ChangeSCIfNumberLessZeroAC = (num: number) => {\n  return {\n    type: CHANGE_SC_IF_NUMBER_LESS_ZERO, num\n  } as const\n}\nexport const ChangeSCIfNumberLessMCAC = (num: number) => {\n  return {\n    type: CHANGE_SC_IF_NUMBER_LESS_MC, num\n  } as const\n}\nexport const ChangeSCIfOthersAC = (num: number) => {\n  return {\n    type: CHANGE_SC_IF_OTHERS, num\n  } as const\n}\nexport const ChangeMCIfNumberMoreSCAC = (num: number) => {\n  return {\n    type: CHANGE_MC_IF_NUMBER_MORE_SC, num\n  } as const\n}\nexport const ChangeMCIfOthersAC = (num: number) => {\n  return {\n    type: CHANGE_MC_IF_OTHERS, num\n  } as const\n}\nexport const SetValuesAC = () => {\n  return {\n    type: SET_VALUES\n  } as const\n}","import React, {useReducer} from 'react';\nimport './App.css';\nimport {Monitor} from \"./Components/Monitor\";\nimport {Button} from \"./Components/Button\";\nimport {Setter} from \"./Components/Setter\";\nimport {\n  AddCountAC, ChangeMCIfNumberMoreSCAC, ChangeMCIfOthersAC,\n  ChangeSCIfNumberLessMCAC,\n  ChangeSCIfNumberLessZeroAC, ChangeSCIfOthersAC,\n  ResetCountAC, SetValuesAC,\n  StateReducer\n} from \"./Reducers/StateReducer\";\n\nexport type StateType = {\n  startCount: number,\n  maxCount: number,\n  count: number,\n  error: boolean,\n  errorStartCount: boolean,\n  errorMaxCount: boolean,\n  disabledButtonSet: boolean\n}\n\nfunction App() {\n  const startCountLocalStorage = Number(localStorage.getItem('startCount'))\n  const maxCountLocalStorage = Number(localStorage.getItem('maxCount'))\n\n  const initState: StateType = {\n    startCount: startCountLocalStorage,\n    maxCount: maxCountLocalStorage,\n    count: startCountLocalStorage,\n    error: false,\n    errorStartCount: false,\n    errorMaxCount: false,\n    disabledButtonSet: true\n  }\n  const [state, dispatchState] = useReducer(StateReducer, initState);\n\n  const addCount = () => {\n    if(state.count < state.maxCount) {\n      dispatchState(AddCountAC())\n    }\n  }\n  const resetCount = () => {\n    dispatchState(ResetCountAC())\n  }\n  const changeStartCount = (num: number) => {\n    if (num < 0) {\n      dispatchState(ChangeSCIfNumberLessZeroAC(num))\n    } else if (num < state.maxCount) {\n      dispatchState(ChangeSCIfNumberLessMCAC(num))\n    } else {\n      dispatchState(ChangeSCIfOthersAC(num))\n    }\n  }\n  const changeMaxCount = (num: number) => {\n    if (num > state.startCount) {\n      dispatchState(ChangeMCIfNumberMoreSCAC(num))\n    } else {\n      dispatchState(ChangeMCIfOthersAC(num))\n    }\n  }\n  const setValues = () => {\n    dispatchState(SetValuesAC())\n    localStorage.setItem('startCount', state.startCount.toString())\n    localStorage.setItem('maxCount', state.maxCount.toString())\n  }\n\n  const buttonIncDisabled = state.count === state.maxCount || !state.disabledButtonSet\n  const buttonResetDisabled = state.count === state.startCount || !state.disabledButtonSet\n\n  return (\n    <div className=\"App\">\n      <div className='wrapper'>\n        <Setter\n          startCount={state.startCount}\n          maxCount={state.maxCount}\n          setStartCount={changeStartCount}\n          setMaxCount={changeMaxCount}\n          errorStartCount={state.errorStartCount}\n          errorMaxCount={state.errorMaxCount}\n        />\n        <div className='button-wrapper'>\n          <Button\n            callBack={setValues}\n            disabled={state.disabledButtonSet}\n          >Set</Button>\n        </div>\n      </div>\n      <div className='wrapper'>\n        <Monitor\n          count={state.count}\n          maxCount={state.maxCount}\n          error={state.error}\n          disabledButtonSet={state.disabledButtonSet}\n        />\n        <div className='button-wrapper'>\n          <Button\n            callBack={addCount}\n            disabled={buttonIncDisabled}\n          >Inc</Button>\n          <Button\n            callBack={resetCount}\n            disabled={buttonResetDisabled}\n          >Reset</Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}